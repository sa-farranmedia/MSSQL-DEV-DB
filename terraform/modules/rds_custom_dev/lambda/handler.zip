# This file is auto-generated by Terraform during apply
# See: data.archive_file.lambda_zip in modules/rds_custom_dev/main.tf
# No manual intervention required
echo "Create AMI from SQL Server Builder Instance"
echo "=========================================="

# Get instance ID from Terraform output
cd ../terraform
INSTANCE_ID=$(terraform output -raw builder_instance_id 2>/dev/null)

if [ -z "$INSTANCE_ID" ]; then
    echo "ERROR: Could not get instance ID from Terraform output"
    echo "Ensure Terraform has been applied successfully"
    exit 1
fi

cd ../scripts

# Generate AMI name with timestamp
TIMESTAMP=$(date +%Y%m%d-%H%M%S)
AMI_NAME="sqlserver2022-dev-cev-${TIMESTAMP}"
AMI_DESC="SQL Server 2022 Developer Edition with CU for RDS Custom CEV"

echo ""
echo "Instance ID: $INSTANCE_ID"
echo "AMI Name: $AMI_NAME"
echo "Description: $AMI_DESC"
echo ""
read -p "Create AMI from this instance? (yes/no): " CONFIRM

if [ "$CONFIRM" != "yes" ]; then
    echo "Cancelled"
    exit 0
fi

echo ""
echo "Creating AMI..."

# Create AMI (no-reboot to preserve SQL Server state)
AMI_ID=$(aws ec2 create-image \
  --instance-id "$INSTANCE_ID" \
  --name "$AMI_NAME" \
  --description "$AMI_DESC" \
  --no-reboot \
  --region us-east-2 \
  --query 'ImageId' \
  --output text)

if [ -z "$AMI_ID" ]; then
    echo "ERROR: Failed to create AMI"
    exit 1
fi

echo "✓ AMI creation initiated: $AMI_ID"
echo ""
echo "Waiting for AMI to be available (this may take 10-15 minutes)..."

aws ec2 wait image-available \
  --image-ids "$AMI_ID" \
  --region us-east-2

echo ""
echo "=========================================="
echo "✓ AMI is ready!"
echo "=========================================="
echo "AMI ID: $AMI_ID"
echo "AMI Name: $AMI_NAME"
echo ""
echo "Next steps:"
echo "1. Save this AMI ID: $AMI_ID"
echo "2. Run: ./create-cev.sh"
echo "3. Provide the AMI ID when prompted"
echo "=========================================="


